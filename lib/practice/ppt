    - How to use packages 정의 및 사용 방식
    >

    - Keywords 종류 및 정의 및 표현 방식 p41
    >
    var name = 'skrudrb';
    dynamic name1;  if(name1 is int){name1.} 항상 쓰기보다 유용할 수 있을 경우 쓰는게 중요

    String name='skrudrb';

    int number = 456;

    final name = 'skrudrb';
      name = ' 나경규'; //에러

    late final String name;
      name = 'skrudrb';
      name = '나경규'; // 에러 // 한번만 할달 가능 api에서 얻어온 값을 써야 할 때가 있음

    const max_allowed_price = 120; //컴파일 이전에 알고있어야하는 값

    - 식별자 종류 및 방식
    >

    - 변수 개념, 정의 및 표현 방식
    > 변수(variable)란 데이터(data)를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간을 의미
     주로 var 자료형을 사용하여 변수를 선언.
     자료를 특정하고 싶으면 int,String,double 사용
     여러 자료형 허용하려면 dynamic 타입을 선언

    - Built-in types 종류, 정의 및 표현 방식
    >
      String name = '나경규';

      String interpolation

      var name = '나경규';
      var age = 24;
      var greeting = '안녕하세요 저는 ${name}입니다. 그리고 저는 ${age + 2}입니다. ';
      var hi='hi, l\'m tom'; //escape 기호
      print(greeting);

    var oldFriend = [
        "a",
        "b",
        'v',
      ];
      var newFriend = [
        'th',
        'eh',
        "reh",
        'fg',
        for (var friend in oldFriend) "★ $friend",

      ];

        print(newFriend);



        bool alive = true;

        int age = 26;

        double money = 69.99;

        num x = 12;
        x = 1.1;

        List.
        var give = false;
          var numbers = [
            1,
            2,
            3,
            4,
            if (give) 5,
          ];
          numbers.length;
          print(numbers);

    Set. set과 리스트의 차이 set은 들어있는 값이 유니크해 중복 불가

      Set<int> numbers = {1, 2, 3, 4, 5,};
      numbers.add(1);
      numbers.add(1);
      numbers.add(1);
      numbers.add(1);
      numbers.add(1);

      print(numbers);



    Map.
    List<Map<String, Object>> players = [
        {'name':'A', 'xp':8848633.55,},
        {'name':'b', 'xp':8843633.55,},
        {'name':'c', 'xp':8847633.55,},
      ];

------------------------------------------------------------------------------------------------------------

    - 함수 정의, 표현, 사용 방식
    > 다트에서는 모든 것이 객체이기 때문에 함수도 객체이다.

--------------------------------------------------------------------------------------------------------------

    - Null safety 개념, 정의, 사용 방식 p. 40
    > 2.0에서 추가된 기능으로 컴파일 전에 널 예외를 알 수 있으므로 널에 대한 오류가 발생하지 않도록 작업할 수 있습니다.
     안전한 프로그램을 빌드할떄 중요
     다른언어같은 경우 null값을 참조해버리면 모든게 고장남


     String? name = '이름';
       name = null;

       if(name != null){
         name.isNotEmpty;
       }

       name?.isNotEmpty;


    int? couldReturnNullButDoesnt()=>-3; // null 가능

    void main(){

      int? couldReturnNullButisnt = 1; //null로 변경가능
      List<int?> listhatCouldHoldNulls = [2 , null , 4]; // null로 포함
      List<int?> nullsList; //리스트 자체가 널일수있음
      int a = couldReturnNullButisnt; //Null이면 오류
      int b = listhatCouldHoldNulls.first!; / /Null이 아님을 직접표시
      int c = couldReturnNullButDoesnt()!.abs(); //Null이 아님을 직접표시

      print('a is $a.');
      print('b is $b.');
      print('c is $c.');
    }
-------------------------------------------------------------------------------------------------
    - 연산자 종류 및 표현 방식, 연산자 우선순위
    >
----------------------------------------------------------------------------------------------------

    - Oter operators 종류 및 표현 방식
    > https://docs.jsonata.org/other-operators
------------------------------------------------------------------------------------------------------------------
    - Control flow statements 종류 및 표현 방식
    >
-------------------------------------------------------------------------------------------------------------
    - 명령문 종류 및 표현 방식
    >
-----------------------------------------------------------------------------------------------------
    - Function 정의 및 사용 방식
    >
    String sayHello(String A){return 'Hello $A nice to meet';}   // 1
    String sayHello(String A) => 'Hello $A nice to meet';       // 1번과 같은 의미

    String sayHello({
      required String name,
      required int age,
      required String country,
    }) =>
        " Hello $name , you're $age, and you come from $country";   // argument 순서 널값방지(아이디나 비밀번호 같은 경우는
                                                                    // 기본값이나 널값을 가지면 안되기때문에 필수로 요구한다.


    void main() {

      print(sayHello('경규'));

      print(sayHello( age: 2,name: "A", country: "kor"));   // argument

    }
------------------------------------------------------------------------------------------
    String capitalizeName(String? name) =>
        //name != null ? name.toUpperCase() : 'ANON'; //1

        name?.toUpperCase() ?? 'Anon'; //1과 같은의미

    typedef UserInfo = Map<String,String>;

    String sayHi(UserInfo userinfo) => "hi ${userinfo['name']}";



    void main() {
     String result = capitalizeName(('skrudrb'));
      capitalizeName(null);
      print(result);

      String? name;
      name ??= 'nico'; // 이름이 null 이면 nico를 받는다
      name = null;
      name = 'skrudrb';
      print (name);

      sayHi({"name":'nico'});

    }

------------------------------------------------------------------------


    - Excetions 종류 및 처리 방식
    > Try
      try 절은 try { } 구문 안에서 특정 에러가 발생하였을때 처리를 해주기 위한 방법입니다.
      try의 다양한 사용 방식은 아래와 같이 try-on, try-catch, try-on-catch 등의 구문등을 조합하여 사용할 수 있습니다.

      Throw
      throw절을 통하여 예외 상황 발생 시 객체 또는 코드 등을 반환할 수 있습니다.

      Catch
      Catch문을 사용하여 예외(Exception) 발생 시 예외 코드가 프로그램 전체에 전파되는 것을 방지할 수 있습니다.


    - Calss 개념, 정의, 표현 방식, 변수 및 함수와 클래스간 연결 함수 및 방식
    >
    abstract class Human {
      void walk();
    }

    enum Team { red, blue }

    enum XP { begin, medium, pro }

    class Player extends Human {
      //final String name;
      String name;
      XP xp /*, age*/;

      Team team;

      void walk() {
        print("Walking");
      }


    /*
      Player(
          {required this.name,
          required this.xp,
          required this.team,
          required this.age});

      Player.creatBluePlayer({
        required String name,
        required int age,
      })  : this.age = age,
            this.name = name,
            this.team = "blue",
            this.xp = 0;

      Player.creatRedPlayer(String name, int age)
          : this.age = age,
            this.name = name,
            this.team = "red",
            this.xp = 1;

      */
    /*

      Player.fromJson(Map<String, dynamic> playerJason)
          : name = playerJason['name'],
            age = playerJason['age'],
            xp = playerJason['xp'],
            team = playerJason['team'];
    */

      Player({
        required this.name,
        required this.xp,
        required this.team,
      });

      void hello() {
        print("my name is $name , my team : $team, my xp : $xp`");
      }
    }

    class Coach extends Human{
      void walk(){
        print('Coach Walking');
      }
    }

    void main() {
      /*var player1 = Player(
        name: "skrudrb",
        xp: 1500,
        team: "red",
        age: 13,
      );
      var player2 = Player(
        name: "나경규",
        xp: 1000,
        team: "blue",
        age: 16,
      );

      var player3 = Player.creatBluePlayer(name: 'ann', age: 21);
      var player4 =Player.creatRedPlayer("andy", 30);


      player1.hello();
      player2.hello();


      player3.hello();
      player4.hello();
    */

      /*var apiData = [
        {
          "name":'nkk',
          "age":15,
          "team":'red',
          "xp":1
        },
        {
          "name":'nku',
          "age":33,
          "team":'blue',
          "xp":2
        },{
          "name":'nbh',
          "age":44,
          "team":'gtr',
          "xp":3
        },
      ];

      apiData.forEach((playJson) {
        var player = Player.fromJson(playJson);
        player.hello();
      });
    */

      var nkk = Player(name: "nkf", xp: XP.begin, team: Team.red)
        /*nkk.name="kang";
      nkk.xp=12;
      nkk.team="blue";
    */
        ..name = "kang"
        ..xp = XP.begin
        ..team = Team.red
        ..hello();

      var kang = nkk
        ..name = "zx"
        ..xp = XP.pro
        ..team = Team.blue
        ..hello();
    }


    - Libraries and visibility 개념 및 사용 방식
    >

    - Futures, async, Declaring async, await functions 개념 및 사용 방식
    >

    - Streams 개념 및 사용 방식
    >

    - JSON 개념 및 사용 방식
    > 서버와의 통신에서 주고 받으면서 상호작용하는 화면에 필요한 데이터를 주고 받는 방식
      dart:convert를 라이브러리로 포함시켜야함

    디코딩
    import 'dart:convert';

    void main(){
      var jsonString='''[
        {"score":40},{"score":80}
      ]''';

      var scores = jsonDecode(jsonString);
      print(scores is List);

      var firstScore = scores[0];
      print(firstScore is Map);
      print(firstScore['score']==40);

    }

    인코딩
    import 'dart:convert';
    void main(){
      var scores=[{'score':40},{'score':80},{'score':100,'overtime':true,'special_guest':null }];

      var jsonText = jsonEncode(scores);
      print(jsonText == '[{"score":40},{"score":80},{"score":100,"overtime":true,"special_guest":null }]');
    }


    - Extension methods 개념 및 사용 방식

    - Generators 개념 및 사용 방식

    - Callable classes 개념 및 사용 방식

    - Isolates 개념, 종류, 사용 방식

    - 주석 종류 및 사용 방식
    >
    - Multi-paltform App 종류 및 사용 방식

    - Command-line & Server Apps, Web Apps 개념, 종류, 사용 방식

    - Tools & Techniques 개념, 정의, 종류 및 사용 방식 > debuggers, static analysis, Testing&Optimization

    - Resource 개념, 종류, 사용 방식

